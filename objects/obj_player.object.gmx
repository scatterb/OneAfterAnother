<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set player stats
phy_fixed_rotation = true;

image_speed = 0;
spd = 4;
hp = 5;
canbehit = true;
canshoot = true;
invframes = 0;
player = obj_player;
weapon = global.weapon;
wpn_cd = 0;
hasshot = false;
movesprite = 0;
global.pellets = global.pellets;
image_xscale = 1.5;
image_yscale = 1.5;

var bar;
bar = (hp/5) * 100;

//Set sprites for player

upsprite = spr_player_up;
downsprite = spr_player_down;
rightsprite = spr_player_right;
leftsprite = spr_player_left;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move the player in the step event  

var up = keyboard_check(ord('W'));
var down = keyboard_check(ord('S'));
var left = keyboard_check(ord('A'));
var right = keyboard_check(ord('D'));




// Move up
if(up){
    phy_position_y -= spd;
    if (hasshot == false) {
        sprite_index = player.upsprite;
    }
    image_speed = .4;
}
// Move down
if(down) {
    phy_position_y += spd;
    if (hasshot == false) {
        sprite_index = player.downsprite;
    }
    image_speed = .4;
}

// Move left
if(left) {
    phy_position_x -= spd;
    if (hasshot == false) {
        sprite_index = player.leftsprite;
    }
    image_speed = .4;
}

// Move right
if(right) {
    phy_position_x += spd;
    if (hasshot == false) {
        sprite_index = player.rightsprite;
    }
    image_speed = .4;
}

//stop animating
if(!down and !right and !left and !up) {
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if player can be hit


if(invframes &lt;= 0) {
    canbehit = true;
    image_alpha = 1;
} else {
    invframes -= 1;
    if (invframes % 6 == 0 or invframes % 5 == 0 or invframes % 4 == 0) {
        image_alpha = .5;
    } else {
        image_alpha = 1;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weapon usage scripts

// Shooting keys

shootup = keyboard_check(ord('I'));
shootdown = keyboard_check(ord('K'));
shootleft = keyboard_check(ord('J'));
shootright = keyboard_check(ord('L'));

// When player shoots
if(shootup or shootdown or shootleft or shootright) {
    if(canshoot == true) {
            for(i=1;i&lt;=global.pellets;i++) {
                    with (instance_create(x-15, y-15, weapon)) {
                        player = obj_player;
                        speed = player.weapon.speed;
        
                        if(player.shootup) {
                            direction = 0;
                            player.sprite_index = player.upsprite;
                        }
                        if(player.shootright) {
                            direction = 90;
                            if(global.weapon.rotates != false) {
                                phy_rotation = 90;
                                phy_position_x += 25;
                            }
                            player.sprite_index = player.rightsprite;
                        }
                        if(player.shootdown) {
                            direction = 180;
                            if(global.weapon.rotates != false) {
                                phy_rotation = 180;
                                phy_position_x += 25;
                                phy_position_y += 35;
                            }
                            player.sprite_index = player.downsprite;
                        }
                        if(player.shootleft) {
                            direction = 270;
                            if(global.weapon.rotates != false) {
                                phy_rotation = 270;
                                //phy_position_x -= 25;
                                phy_position_y += 25;
                            }
                            player.sprite_index = player.leftsprite;
                        }   
                    }
                }
            
        // Set cooldown on weapon so button can be held
            canshoot = false;
            wpn_cd = weapon.wpn_rof;
        // Set cooldown on movement. if cd is on, model doesn't turn from movement
            hasshot = true;
            movesprite = 60;
            
    }
}

// Cooldown on weapon

if (wpn_cd &lt;= 0) {
    canshoot = true;
} else {
    wpn_cd -= 1;
}

// Model turn cooldown

if (movesprite &lt;= 0) {
    hasshot = false;
} else {
    movesprite -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Win condition

if(instance_number(obj_enemy) == 0) {
    show_message("Voitit pelin");
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide
if(canbehit == true) {
    if(place_meeting(x,y,obj_enemy)) {
        hp -= 1;
        
        
        if(obj_player.sprite_index == 0) {
            phy_position_x -= 30;
        }
        if(obj_player.sprite_index == 1) {
            phy_position_y -= 30;
        }
        if(obj_player.sprite_index == 2) {
            phy_position_x += 30;
        }
        if(obj_player.sprite_index == 3) {
            phy_position_y += 30;
        }
        
        
        if(hp &lt;= 0) {
            instance_destroy();
            game_end();
        }
        
        canbehit = false;
        invframes = 180;
        
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw healthbar and such and such

var bar;
bar = (hp/5) * 100;

draw_healthbar(5, 5, 400, 25, bar, c_white, c_white, c_green, 0, true, true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,4</point>
    <point>20,4</point>
    <point>20,30</point>
    <point>12,30</point>
  </PhysicsShapePoints>
</object>
